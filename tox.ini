[tox]
skipsdist = True
envlist = {py27,py35,py36,py37}-{release,wheel},lint
python_env_info =
	python -c "" # Let's print this, it's usefull for debugging especially on Windows
	python -c "import sys; print('Python Interpreter\n\{\}'.format(sys.version))"
	python -c "import os; print('Environmental Variables\n\{\}'.format('\n'.join('\{\} -> \{\}'.format(k, v) for k, v in os.environ.items())))"

[testenv]
setenv =
	RUST_TOOLCHAIN = {env:RUST_TOOLCHAIN:nightly}
	!release,!wheel: PIP_INSTALL_ARGS = {env:PIP_INSTALL_ARGS:-e}
	release,wheel: PIP_INSTALL_ARGS = {env:PIP_INSTALL_ARGS:}
deps = -rrequirements-dev.txt
passenv =
	RUST_BACKTRACE
	RUSTC_WRAPPER
	CARGO_EXTRA_ARGS
	PIP_INSTALL_ARGS
commands =
	{[tox]python_env_info}
	!wheel: pip install {env:PIP_INSTALL_ARGS} {toxinidir}
	!wheel: python -m pytest {posargs:python/tests}
	wheel: python setup.py bdist_wheel

[testenv:cargo_test]
whitelist_externals =
	cargo
commands =
	{[tox]python_env_info}
	cargo build --tests {env:CARGO_EXTRA_ARGS:}
	cargo test {env:CARGO_EXTRA_ARGS:}

[testenv:coverage]
basepython = python3.6
platform = linux
whitelist_externals =
	bash
	cargo
	kcov
commands =
	{[tox]python_env_info}
	pip install {env:PIP_INSTALL_ARGS} {toxinidir}
	coverage erase
	coverage run -m pytest {posargs:python/tests}
	coverage report
	cargo build --tests --all-features
	cargo kcov --version  # ensure that cargo-kcov is installed
	kcov --version	# ensure that kcov is installed
	bash -c "find target/debug/deps/ -name rust_swagger_validator_tests* -type f -executable | while read executable; do \
	mkdir -p .rust_coverage/$(basename $\{executable\}); \
	kcov --exclude-pattern=/.cargo,/usr/lib --verify .rust_coverage/$(basename $\{executable\}) $\{executable\}; \
	done"

[testenv:lint]
basepython = python3.6
deps = pre-commit
whitelist_externals =
	cargo
	touch
commands =
	pre-commit run --all-files
	touch rust/src/lib.rs  # touch a file of the rust project to "force" cargo to recompile it so clippy will actually run
	cargo +{env:RUST_TOOLCHAIN} clippy --all-targets --all-features -- -D clippy::pedantic -D clippy::nursery

[testenv:venv]
basepython = python3.6
envdir = {toxinidir}/venv
commands =

[flake8]
max-line-length = 141

[pep8]
ignore = E265,E501
