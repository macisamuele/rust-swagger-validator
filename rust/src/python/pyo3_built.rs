// This file is an adaptation of https://github.com/PyO3/pyo3-built
// pyo3-built seems not released on the public crates :(

#[macro_export]
macro_rules! pyo3_built {
    ($py: ident) => {{
        extern crate chrono;
        #[allow(dead_code)]  // this is used to remove the warnings related to un-used constants in built.rs
        mod build {
            include!(concat!(env!("OUT_DIR"), "/built.rs"));
        }

        let info = PyDict::new($py);

        // Rustc
        let build = PyDict::new($py);
        build.set_item("rustc", build::RUSTC)?;
        build.set_item("rustc-version", build::RUSTC_VERSION)?;
        build.set_item("opt-level", build::OPT_LEVEL)?;
        build.set_item("debug", build::DEBUG)?;
        build.set_item("jobs", build::NUM_JOBS)?;
        build.set_item("pkg-version", build::PKG_VERSION)?;
        build.set_item("git-sha", build::GIT_VERSION)?;
        build.set_item("ci-platform", build::CI_PLATFORM)?;
        info.set_item("build", build)?;

        // info time
        let ts = chrono::DateTime::parse_from_rfc2822(build::BUILT_TIME_UTC)
            // unwrap is safe to be used as the string to parse has been generated by build.rs
            .unwrap().timestamp();
        let dt = $py
            .import("datetime")?
            .get("datetime")?
            .into_object($py)
            .call_method1($py, "fromtimestamp", (ts,))?;
        info.set_item("info-time", dt)?;

        // info dependencies
        let deps = PyDict::new($py);
        for (name, version) in build::DEPENDENCIES.iter() {
            deps.set_item(name, version)?;
        }
        info.set_item("dependencies", deps)?;

        // Features
        let features = build::FEATURES
            .iter()
            .map(|feat| PyString::new($py, feat)).collect::<Vec<_>>();
        info.set_item("features", features)?;

        // Host
        let host = PyDict::new($py);
        host.set_item("triple", build::HOST)?;
        info.set_item("host", host)?;

        // Target
        let target = PyDict::new($py);
        target.set_item("arch", build::CFG_TARGET_ARCH)?;
        target.set_item("os", build::CFG_OS)?;
        target.set_item("family", build::CFG_FAMILY)?;
        target.set_item("env", build::CFG_ENV)?;
        target.set_item("triple", build::TARGET)?;
        target.set_item("endianness", build::CFG_ENDIAN)?;
        target.set_item("pointer-width", build::CFG_POINTER_WIDTH)?;
        target.set_item("profile", build::PROFILE)?;
        info.set_item("target", target)?;

        info
    }};
}
