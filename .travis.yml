# Please make sure to only modify the template file and not the generated ones.
# Check ${GIT_REPO_ROOT}/ci/gi-config.py too verify how the template is used.
language: python

dist: xenial
sudo: false

env:
  global:
  - BREW_HOME=/usr/local/  # Define environment variable for brew home location
  - PYTHONUNBUFFERED='1'   # disable python buffering, output come as it is generated
  - RUST_BACKTRACE=full    # Rust build are verbose
  - RUST_TOOLCHAIN=nightly # Rust toolchain to install
  - SCCACHE_DIR=${HOME}/.sccache_${TRAVIS_OS_NAME} # sscache cache directory
  - SSCACHE_VERSION=0.2.7  # sscache version to install
  # # Make build very verbose
  # - CARGO_EXTRA_ARGS="--verbose"
  # - PIP_EXTRA_ARGS="--verbose"

matrix:
  fast_finish: true
  include:
  - os: linux
    env: TOXENV=lint CACHE_KEY=OS.LINUX-PythonVersion.PY36-lint
    python: '3.6'
  - os: linux
    env: TOXENV=coverage CACHE_KEY=OS.LINUX-PythonVersion.PY36-coverage
    python: '3.6'
    sudo: required
    addons:
      apt:
        packages:
        - libcurl4-openssl-dev
        - libelf-dev
        - libdw-dev
        - cmake
        - gcc
        - binutils-dev
        - libiberty-dev
  - os: linux
    env: TOXENV=cargo_test,py27 CACHE_KEY=OS.LINUX-PythonVersion.PY27-cargo_test,py27
    python: '2.7'
  - os: osx
    env: TOXENV=cargo_test,py27 CACHE_KEY=OS.OSX-PythonVersion.PY27-cargo_test,py27 PYTHON=2.7.15
    language: generic
  - os: linux
    env: TOXENV=cargo_test,py35 CACHE_KEY=OS.LINUX-PythonVersion.PY35-cargo_test,py35
    python: '3.5'
  - os: osx
    env: TOXENV=cargo_test,py35 CACHE_KEY=OS.OSX-PythonVersion.PY35-cargo_test,py35 PYTHON=3.5.6
    language: generic
  - os: linux
    env: TOXENV=cargo_test,py36 CACHE_KEY=OS.LINUX-PythonVersion.PY36-cargo_test,py36
    python: '3.6'
  - os: osx
    env: TOXENV=cargo_test,py36 CACHE_KEY=OS.OSX-PythonVersion.PY36-cargo_test,py36 PYTHON=3.6.6
    language: generic
  - os: linux
    env: TOXENV=cargo_test,py37 CACHE_KEY=OS.LINUX-PythonVersion.PY37-cargo_test,py37
    python: '3.7'
    sudo: required
  - os: osx
    env: TOXENV=cargo_test,py37 CACHE_KEY=OS.OSX-PythonVersion.PY37-cargo_test,py37 PYTHON=3.7.0
    language: generic
  - os: linux
    env: TOXENV=py27-wheel CACHE_KEY=OS.LINUX-PythonVersion.PY27-py27-wheel
    python: '2.7'
  - os: osx
    env: TOXENV=py27-wheel CACHE_KEY=OS.OSX-PythonVersion.PY27-py27-wheel PYTHON=2.7.15
    language: generic
  - os: linux
    env: TOXENV=py35-wheel CACHE_KEY=OS.LINUX-PythonVersion.PY35-py35-wheel
    python: '3.5'
  - os: osx
    env: TOXENV=py35-wheel CACHE_KEY=OS.OSX-PythonVersion.PY35-py35-wheel PYTHON=3.5.6
    language: generic
  - os: linux
    env: TOXENV=py36-wheel CACHE_KEY=OS.LINUX-PythonVersion.PY36-py36-wheel
    python: '3.6'
  - os: osx
    env: TOXENV=py36-wheel CACHE_KEY=OS.OSX-PythonVersion.PY36-py36-wheel PYTHON=3.6.6
    language: generic
  - os: linux
    env: TOXENV=py37-wheel CACHE_KEY=OS.LINUX-PythonVersion.PY37-py37-wheel
    python: '3.7'
    sudo: required
  - os: osx
    env: TOXENV=py37-wheel CACHE_KEY=OS.OSX-PythonVersion.PY37-py37-wheel PYTHON=3.7.0
    language: generic

install:
- |
  if [ "${TRAVIS_OS_NAME}" == "osx" ]; then
    # Ensure that ccache is installed so subsequent build could be take advantage of caching ccache
    if ! find ${BREW_HOME}/Cellar/ccache/*/bin/ccache -quit; then
      echo brew install ccache > /dev/stderr
      time brew install ccache
    fi
    export PATH="${BREW_HOME}/opt/ccache/libexec:${PATH}"
    if ! find ${BREW_HOME}/Cellar/pyenv/*/bin/pyenv -quit; then
      echo brew install pyenv > /dev/stderr
      time brew install pyenv
    fi
    if ! find ${BREW_HOME}/Cellar/pyenv-virtualenv/*/bin/pyenv-virtualenv -quit; then
      echo brew install pyenv-virtualenv > /dev/stderr
      time brew install pyenv-virtualenv
    fi
    # Ensure that the required python version is installed, if not going to install it
    if ! pyenv versions --bare | grep -q "^${PYTHON}\$"; then
      # According to pyenv homebrew recommendations (https://github.com/yyuu/pyenv/wiki#suggested-build-environment)
      echo brew install openssl readline sqlite3 xz zlib > /dev/stderr
      time brew install openssl readline sqlite3 xz zlib
      echo pyenv install ${PYTHON} > /dev/stderr
      time pyenv install ${PYTHON}
    fi
    export PYENV_VERSION=${PYTHON}
    export PATH="${HOME}/.pyenv/shims:${PATH}"
    echo pyenv-virtualenv venv > /dev/stderr
    pyenv-virtualenv venv
    source venv/bin/activate
    python --version
  fi
- pip install codecov tox-pip-extensions wheel
- |
  if [ "${TOXENV}" == "lint" ]; then
    # Override the default toolchain as clippy-preview component could not available on latest toolchain
    export RUST_TOOLCHAIN=${RUST_TOOLCHAIN}
  fi
- |
  # Installing rust from sources is faster than caching it, additionally it removes the issue of using a "stale" nightly version
  curl --silent --fail --show-error --location --retry 3 https://sh.rustup.rs | \
    sh -s -- --default-toolchain none --verbose -y
  export PATH=${HOME}/.cargo/bin:${PATH}
  echo rustup install ${RUST_TOOLCHAIN} > /dev/stderr
  rustup install ${RUST_TOOLCHAIN}
- |
  if [ "${TOXENV}" == "lint" ]; then
    # Install rustfmt and clippy in case of lint tests
    rustup component add rustfmt-preview --toolchain ${RUST_TOOLCHAIN}
    rustup component add clippy-preview --toolchain ${RUST_TOOLCHAIN}
  fi
- |
  # Install sccache
  if [ "${TRAVIS_OS_NAME}" == "osx" ]; then
    HOST_TRIPLETE="x86_64-apple-darwin"
  else
    HOST_TRIPLETE="x86_64-unknown-linux-musl"
  fi
  TMP_DIR="$(mktemp -d)"
  curl --silent --fail --show-error --location --retry 3 \
    https://github.com/mozilla/sccache/releases/download/${SSCACHE_VERSION}/sccache-${SSCACHE_VERSION}-${HOST_TRIPLETE}.tar.gz | \
      tar -xz -C ${TMP_DIR}
  export PATH=${TMP_DIR}/sccache-${SSCACHE_VERSION}-${HOST_TRIPLETE}:${PATH}
  sccache --start-server
  export RUSTC_WRAPPER=sccache
- |
  if [ "${TRAVIS_OS_NAME}" == "linux" -a "${TOXENV}" == "coverage" ]; then
    # Install cargo-kcov dependencies (we don't need to do it in tox and keep it clean)
    TMP_DIR=$(mktemp -d)
    cd ${TMP_DIR}
    command -v cargo-kcov &> /dev/null || cargo install cargo-kcov
    command -v kcov &> /dev/null || ( cargo kcov --print-install-kcov-sh | sh)
    cd -
    rm -rf ${TMP_DIR}
  fi

before_script:
# Print versions of the interesting tools
- rustup --version
- rustup show
- rustc --version --verbose
- cargo --version --verbose
- python -c "import sys;print(sys.version)"
- pip --version
- tox --version

script:
- tox

after_success:
- if [ "${TOXENV}" == "coverage" ]; then codecov --verbose; fi

before_cache:
# Print ccache and sscache statistics
- ccache --show-stats
- sccache --show-stats
# Print build.rs so we could expose information related to rust build
- BUILT_RS_PATH=$(find target/*/build/rust_swagger_validator-*/out/built.rs | head -n 1) && echo ${BUILT_RS_PATH} && cat ${BUILT_RS_PATH}
# Delete artifacts of this specific library. This allows to reduce the amount of differences for the cache
# NOTE: this means that rust_swagger_validator will be built every time but we gain on not building all the dependencies
- find ${TRAVIS_BUILD_DIR}/target/*/*rust_swagger_validator* | xargs rm -rfv
- find ${TRAVIS_BUILD_DIR}/target/*/*/*rust_swagger_validator* | xargs rm -rfv
- find ${TRAVIS_BUILD_DIR}/target/*/.fingerprint/*rust_swagger_validator* | xargs rm -rfv
# Remove build_script information
- find ${TRAVIS_BUILD_DIR}/target/*/build_script_build* | xargs rm -rfv
- find ${TRAVIS_BUILD_DIR}/target/*/*/build_script_build* | xargs rm -rfv
# Delete empty directories (reduce probability of difference in cache)
- find ${TRAVIS_BUILD_DIR}/target -depth -type d -empty -exec rm -rfv {} \;
# Don't cache crate registry, it's going to change every time and so cache will be invalidated and regenerated too often
- rm -rf ${HOME}/.cargo/registry/index/
# Print size statistics of cached directories (hopefully those are kept in sync with #/cache/directories)
- du -sh ${HOME}/.ccache ${HOME}/.sccache_* ${HOME}/.cache/pip ${HOME}/.cache/pip-faster ${HOME}/.cache/pre-commit ${HOME}/.cargo ${HOME}/.rustup ${SCCACHE_DIR} ${HOME}/Library/Caches/Homebrew ${BREW_HOME} ${HOME}/.pyenv/

cache:
  timeout: 3600
  directories:
  - ${HOME}/.ccache
  - ${HOME}/.sccache_*
  - ${HOME}/.cache/pip
  - ${HOME}/.cache/pip-faster
  - ${HOME}/.cache/pre-commit
  - ${HOME}/.cargo
  - ${SCCACHE_DIR}
  # Caching of homebrew dependencies
  - ${HOME}/Library/Caches/Homebrew
  # - ${BREW_HOME}
  - ${HOME}/.pyenv/

notifications:
  email: false
  slack:
    # Personal Slack notification
    secure: n2hl9R7lleh8S7TYVzgq5IFI1NTVV84DcCraDTF8UZR3vSRzIgbnXx1KxXzJdcC5oyCdo3m0T7iyr/L46jZnWP9fEGxYEiK9cTDquSy5huTy92M9xPcqvXVny2OJhbX9B667/HS4o34HvixaAGv3/Y0iKWgvpT9esX8vH6Uh05IE7YrXZPQnteuhOSdXelYUtqz+5H1r36YVzrNWAaXKOclYxURLKr5rp0Nil+rIiKFM5AJfStYb/xrIrog8uSCi12uUgKw43d0GCTCRytjiMIt2gOBOMgcDc9j9nEEQcPuOWemj+fg6IVCtT4jrjLqSiLegzGCZsyyzeJUHCbi6YJUDNelWKmD8F13AufXciCbJMZCrXIPS7/XX8iKIaYBP3/Z0Bfw0Rtyu0fYb+VhwF6FDMwpp9NKARhBMauANnaEzVGuspV6s4cyRyQSnj55UELiGqgr2+REg/eKRm4cWT1Lnc+SidjsA7S/pBWCpusNea5j1l69As5pAdCnKFHH3Jbt5KadY5qGYxlb2t/iYHofI/0pp57J97wmooKVOk533djtuFF7iqemNM7dHUuVE0xW0ug1fCgbmMQoE6QePtLfO4MnsHsc0hLsZYm2Gl7iMdExTWShZfmdrGFkRr79L5xuEV2nM1JZYa0Pi5ue18YUuk5nwnH3LINR/FNXr0bo=
